.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.43)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "DictionariesCommon 3pm"
.TH DictionariesCommon 3pm "2023-3-14" "1.29.5" " "
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Debian::DictionariesCommon.pm \- dictionaries\-common library
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 4
\&    use Debian::DictionariesCommon q(:all)
\&    $dictionaries = parseinfo (\*(Aq/var/lib/dictionaries\-common/ispell/iwolof\*(Aq);
\&    loaddb (\*(Aqispell\*(Aq)
\&    updatedb (\*(Aqwordlist\*(Aq)
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Common functions for use from the dictionaries-common system.
.SH "CALLING FUNCTIONS"
.IX Header "CALLING FUNCTIONS"
.ie n .IP """dico_checkroot""" 4
.el .IP "\f(CWdico_checkroot\fR" 4
.IX Item "dico_checkroot"
Check for rootness and fail if not.
.ie n .IP """build_emacsen_support""" 4
.el .IP "\f(CWbuild_emacsen_support\fR" 4
.IX Item "build_emacsen_support"
Put info from dicts info files into emacsen\-ispell\-dicts.el
.ie n .IP """build_jed_support""" 4
.el .IP "\f(CWbuild_jed_support\fR" 4
.IX Item "build_jed_support"
Put info from dicts info files into jed\-ispell\-dicts.sl
.ie n .IP """build_squirrelmail_support""" 4
.el .IP "\f(CWbuild_squirrelmail_support\fR" 4
.IX Item "build_squirrelmail_support"
Build support file for squirrelmail with a list of available
dictionaries and associated spellchecker calls, in php format.
.ie n .IP """$libdir = getlibdir($class)""" 4
.el .IP "\f(CW$libdir = getlibdir($class)\fR" 4
.IX Item "$libdir = getlibdir($class)"
Return info dir for given class.
.ie n .IP """$default = dico_getsysdefault($class)""" 4
.el .IP "\f(CW$default = dico_getsysdefault($class)\fR" 4
.IX Item "$default = dico_getsysdefault($class)"
Return system default value for given class.
.ie n .IP """$libdir = getuserdefault""" 4
.el .IP "\f(CW$libdir = getuserdefault\fR" 4
.IX Item "$libdir = getuserdefault"
Return value for user default ispell dictionary.
.ie n .IP """dico_get_spellchecker_params($class,\e%language)""" 4
.el .IP "\f(CWdico_get_spellchecker_params($class,\e%language)\fR" 4
.IX Item "dico_get_spellchecker_params($class,%language)"
Get right params for \f(CW$class\fR (currently unused) and \f(CW$language\fR
.ie n .IP """\e%dictionaries = loaddb($class)""" 4
.el .IP "\f(CW\e%dictionaries = loaddb($class)\fR" 4
.IX Item "%dictionaries = loaddb($class)"
Read class .db file and return a reference to a hash
with its contents.
.ie n .IP """\e%result = parseinfo($file)""" 4
.el .IP "\f(CW\e%result = parseinfo($file)\fR" 4
.IX Item "%result = parseinfo($file)"
Parse given info file and return a reference to a hash with
the relevant data.
.ie n .IP """setsysdefault($value)""" 4
.el .IP "\f(CWsetsysdefault($value)\fR" 4
.IX Item "setsysdefault($value)"
Set value for system default ispell dictionary.
.ie n .IP """setuserdefault""" 4
.el .IP "\f(CWsetuserdefault\fR" 4
.IX Item "setuserdefault"
Set value for user default ispell dictionary, after asking
to select it from the available values.
.ie n .IP """updatedb($class)""" 4
.el .IP "\f(CWupdatedb($class)\fR" 4
.IX Item "updatedb($class)"
Parse info files for given class and update class .db
file under dictionaries-common cache dir.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Debian dictionaries-common policy.
.SH "AUTHORS"
.IX Header "AUTHORS"
.Vb 2
\& Rafael Laboissiere
\& Agustin Martin
.Ve

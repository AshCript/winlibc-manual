.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.43)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "deb-src-control 5"
.TH deb-src-control 5 "2023-05-11" "1.21.22" "dpkg suite"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
deb\-src\-control \- Debian source packages' master control file format
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
\&\fBdebian/control\fR
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Each Debian source package contains the master \(Fo\fBdebian/control\fR\(Fc file,
and its \fBdeb822\fR\|(5) format is a superset of the \fBcontrol\fR file
shipped in Debian binary packages, see \fBdeb-control\fR(5).
.PP
This file contains at least 2 stanzas, separated by a blank line.
The first stanza lists all information about the source package in general,
while each following stanza describes exactly one binary package.
Each stanza consists of at least one field.
A field starts with a fieldname, such as \fBPackage\fR or \fBSection\fR
(case insensitive), followed by a colon, the body of the field
(case sensitive unless stated otherwise) and a newline.
Multi-line fields are also allowed, but each supplementary line, without a
fieldname, should start with at least one space. The content of the multi-line
fields is generally joined to a single line by the tools (except in the case of
the
\&\fBDescription\fR
field, see below). To insert empty lines into a multi-line
field, insert a dot after the space.
Lines starting with a \(oq\fB#\fR\(cq are treated as comments.
.SH "SOURCE FIELDS"
.IX Header "SOURCE FIELDS"
.IP "\fBSource:\fR \fIsource-package-name\fR (required)" 4
.IX Item "Source: source-package-name (required)"
The value of this field is the name of the source package, and should
match the name of the source package in the debian/changelog file. A package
name must consist only of lowercase letters (a\-z), digits (0\-9), plus (+) and
minus (\-) signs, and periods (.). Package names must be at least two characters
long and must start with a lowercase alphanumeric character (a\-z0\-9).
.IP "\fBMaintainer:\fR \fIfullname-email\fR (recommended)" 4
.IX Item "Maintainer: fullname-email (recommended)"
Should be in the format \(FoJoe Bloggs <jbloggs@foo.com>\(Fc, and references the
person who currently maintains the package, as opposed to the author of the
software or the original packager.
.IP "\fBUploaders:\fR \fIfullname-email\fR" 4
.IX Item "Uploaders: fullname-email"
Lists all the names and email addresses of co-maintainers of the package, in
the same format as the \fBMaintainer\fR field.
Multiple co-maintainers should be separated by a comma.
.IP "\fBStandards-Version:\fR \fIversion-string\fR" 4
.IX Item "Standards-Version: version-string"
This documents the most recent version of the distribution policy standards
this package complies with.
.IP "\fBDescription\fR \fIshort-description\fR" 4
.IX Item "Description short-description"
.PD 0
.IP "Â \fIlong-description\fR" 4
.IX Item " long-description"
.PD
The format for the source package description is a short brief summary on the
first line (after the \fBDescription\fR field).
The following lines should be used as a longer, more detailed description.
Each line of the long description must be preceded by a space, and blank
lines in the long description must contain a single \(oq\fB.\fR\(cq following
the preceding space.
.IP "\fBHomepage:\fR \fIurl\fR" 4
.IX Item "Homepage: url"
The upstream project home page \s-1URL.\s0
.IP "\fBBugs:\fR \fIurl\fR" 4
.IX Item "Bugs: url"
The \fIurl\fR of the bug tracking system for this package. The current
used format is \fIbts-type\fR\fB://\fR\fIbts-address\fR, like
\&\fBdebbugs://bugs.debian.org\fR. This field is usually not needed.
.IP "\fBRules-Requires-Root:\fR \fBno\fR|\fBbinary-targets\fR|\fIimpl-keywords\fR" 4
.IX Item "Rules-Requires-Root: no|binary-targets|impl-keywords"
This field is used to indicate whether the \fBdebian/rules\fR file requires
(fake)root privileges to run some of its targets, and if so when.
.RS 4
.IP "\fBno\fR" 4
.IX Item "no"
The binary targets will not require (fake)root at all.
.IP "\fBbinary-targets\fR" 4
.IX Item "binary-targets"
The binary targets must always be run under (fake)root.
This value is the default when the field is omitted; adding the field
with an explicit \fBbinary-targets\fR while not strictly needed, marks
it as having been analyzed for this requirement.
.IP "\fIimpl-keywords\fR" 4
.IX Item "impl-keywords"
This is a space-separated list of keywords which define when (fake)root
is required.
.Sp
Keywords consist of \fInamespace\fR/\fIcases\fR.
The \fInamespace\fR part cannot contain \*(L"/\*(R" or whitespace.
The \fIcases\fR part cannot contain whitespace.
Furthermore, both parts must consist entirely of printable \s-1ASCII\s0 characters.
.Sp
Each tool/package will define a namespace named after itself and provide
a number of cases where (fake)root is required.
(See \*(L"Implementation provided keywords\*(R" in \fIrootless\-builds.txt\fR).
.Sp
When the field is set to one of the \fIimpl-keywords\fR, the builder will
expose an interface that is used to run a command under (fake)root.
(See \*(L"Gain Root \s-1API\*(R"\s0 in \fIrootless\-builds.txt\fR.)
.RE
.RS 4
.RE
.IP "\fBTestsuite:\fR \fIname-list\fR" 4
.IX Item "Testsuite: name-list"
.PD 0
.IP "\fBTestsuite-Triggers:\fR \fIpackage-list\fR" 4
.IX Item "Testsuite-Triggers: package-list"
.PD
These fields are described in the
\&\fBdsc\fR(5)
manual page, as they are generated from information inferred from
\&\fBdebian/tests/control\fR or copied literally to the source control file.
.IP "\fBVcs-Arch:\fR \fIurl\fR" 4
.IX Item "Vcs-Arch: url"
.PD 0
.IP "\fBVcs-Bzr:\fR \fIurl\fR" 4
.IX Item "Vcs-Bzr: url"
.IP "\fBVcs-Cvs:\fR \fIurl\fR" 4
.IX Item "Vcs-Cvs: url"
.IP "\fBVcs-Darcs:\fR \fIurl\fR" 4
.IX Item "Vcs-Darcs: url"
.IP "\fBVcs-Git:\fR \fIurl\fR" 4
.IX Item "Vcs-Git: url"
.IP "\fBVcs-Hg:\fR \fIurl\fR" 4
.IX Item "Vcs-Hg: url"
.IP "\fBVcs-Mtn:\fR \fIurl\fR" 4
.IX Item "Vcs-Mtn: url"
.IP "\fBVcs-Svn:\fR \fIurl\fR" 4
.IX Item "Vcs-Svn: url"
.PD
The \fIurl\fR of the Version Control System repository used to maintain this
package. Currently supported are \fBArch\fR, \fBBzr\fR (Bazaar), \fBCvs\fR,
\&\fBDarcs\fR, \fBGit\fR, \fBHg\fR (Mercurial), \fBMtn\fR (Monotone) and
\&\fBSvn\fR (Subversion). Usually this field points to the latest version
of the package, such as the main branch or the trunk.
.IP "\fBVcs-Browser:\fR \fIurl\fR" 4
.IX Item "Vcs-Browser: url"
The \fIurl\fR of a webinterface to browse the Version Control System
repository.
.IP "\fBOrigin:\fR \fIname\fR" 4
.IX Item "Origin: name"
The name of the distribution this package is originating from. This field is
usually not needed.
.IP "\fBSection:\fR \fIsection\fR" 4
.IX Item "Section: section"
This is a general field that gives the package a category based on the
software that it installs.
Some common sections are \fButils\fR, \fBnet\fR, \fBmail\fR, \fBtext\fR,
\&\fBx11\fR, etc.
.IP "\fBPriority:\fR \fIpriority\fR" 4
.IX Item "Priority: priority"
Sets the importance of this package in relation to the system as a whole.
Common priorities are \fBrequired\fR, \fBstandard\fR, \fBoptional\fR,
\&\fBextra\fR, etc.
.Sp
The
\&\fBSection\fR
and
\&\fBPriority\fR
fields usually have a defined set of accepted values based on the specific
distribution policy.
.IP "\fBBuild-Depends:\fR \fIpackage-list\fR" 4
.IX Item "Build-Depends: package-list"
A list of packages that need to be installed and configured to be able
to build from source package.
These dependencies need to be satisfied when building binary architecture
dependent or independent packages and source packages.
Including a dependency in this field does not have the exact same effect as
including it in both \fBBuild-Depends-Arch\fR and \fBBuild-Depends-Indep\fR,
because the dependency also needs to be satisfied when building the source
package.
.IP "\fBBuild-Depends-Arch:\fR \fIpackage-list\fR" 4
.IX Item "Build-Depends-Arch: package-list"
Same as \fBBuild-Depends\fR, but they are only needed when building the
architecture dependent packages. The \fBBuild-Depends\fR are also
installed in this case. This field is supported since dpkg 1.16.4; in
order to build with older dpkg versions, \fBBuild-Depends\fR
should be used instead.
.IP "\fBBuild-Depends-Indep:\fR \fIpackage-list\fR" 4
.IX Item "Build-Depends-Indep: package-list"
Same as \fBBuild-Depends\fR, but they are only needed when building the
architecture independent packages. The \fBBuild-Depends\fR are also
installed in this case.
.IP "\fBBuild-Conflicts:\fR \fIpackage-list\fR" 4
.IX Item "Build-Conflicts: package-list"
A list of packages that should not be installed when the package is
built, for example because they interfere with the build system used.
Including a dependency in this list has the same effect as including
it in both \fBBuild-Conflicts-Arch\fR and
\&\fBBuild-Conflicts-Indep\fR, with the additional effect of being
used for source-only builds.
.IP "\fBBuild-Conflicts-Arch:\fR \fIpackage-list\fR" 4
.IX Item "Build-Conflicts-Arch: package-list"
Same as \fBBuild-Conflicts\fR, but only when building the architecture
dependent packages. This field is supported since dpkg 1.16.4; in
order to build with older dpkg versions, \fBBuild-Conflicts\fR should
be used instead.
.IP "\fBBuild-Conflicts-Indep:\fR \fIpackage-list\fR" 4
.IX Item "Build-Conflicts-Indep: package-list"
Same as \fBBuild-Conflicts\fR, but only when building the architecture
independent packages.
.PP
The syntax of the
\&\fBBuild-Depends\fR,
\&\fBBuild-Depends-Arch\fR
and
\&\fBBuild-Depends-Indep\fR
fields is a list of groups of alternative packages.
Each group is a list of packages separated by vertical bar (or \(lqpipe\(rq)
symbols, \(oq\fB|\fR\(cq.
The groups are separated by commas \(oq\fB,\fR\(cq, and can end with a
trailing comma that will be eliminated when generating the fields
for \fBdeb-control\fR(5) (since dpkg 1.10.14).
Commas are to be read as \(lqAND\(rq, and pipes as \(lqOR\(rq, with pipes
binding more tightly.
Each package name is optionally followed by an architecture qualifier
appended after a colon \(oq\fB:\fR\(cq,
optionally followed by a version number specification in parentheses
\(oq\fB(\fR\(cq and \(oq\fB)\fR\(cq, an
architecture specification in square brackets \(oq\fB[\fR\(cq and \(oq\fB]\fR\(cq,
and a restriction formula
consisting of one or more lists of profile names in angle brackets
\(oq\fB<\fR\(cq and \(oq\fB>\fR\(cq.
.PP
The syntax of the
\&\fBBuild-Conflicts\fR,
\&\fBBuild-Conflicts-Arch\fR
and
\&\fBBuild-Conflicts-Indep\fR
fields is a list of comma-separated package names, where the comma is read
as an \(lqAND\(rq, and where the list can end with a trailing comma that will
be eliminated when generating the fields for \fBdeb-control\fR(5)
(since dpkg 1.10.14).
Specifying alternative packages using a \(lqpipe\(rq is not supported.
Each package name is optionally followed by a version number specification in
parentheses, an architecture specification in square brackets, and a
restriction formula consisting of one or more lists of profile names in
angle brackets.
.PP
An architecture qualifier name can be a real Debian architecture name
(since dpkg 1.16.5), \fBany\fR (since dpkg 1.16.2) or \fBnative\fR
(since dpkg 1.16.5).
If omitted, the default for \fBBuild-Depends\fR fields is the current host
architecture, the default for \fBBuild-Conflicts\fR fields is \fBany\fR.
A real Debian architecture name will match exactly that architecture for
that package name, \fBany\fR will match any architecture for that package
name if the package is marked with \fBMulti-Arch: allowed\fR, and
\&\fBnative\fR will match the current build architecture if the package
is not marked with \fBMulti-Arch: foreign\fR.
.PP
A version number may start with a \(oq\fB>>\fR\(cq, in which case any
later version will match, and may specify or omit the Debian packaging
revision (separated by a hyphen).
Accepted version relationships are \(oq\fB>>\fR\(cq for greater than,
\(oq\fB<<\fR\(cq for less than, \(oq\fB>=\fR\(cq for greater than or
equal to, \(oq\fB<=\fR\(cq for less than or equal to, and \(oq\fB=\fR\(cq
for equal to.
.PP
An architecture specification consists of one or more architecture names,
separated by whitespace. Exclamation marks may be prepended to each of the
names, meaning \(lqNOT\(rq.
.PP
A restriction formula consists of one or more restriction lists, separated
by whitespace. Each restriction list is enclosed in angle brackets. Items
in the restriction list are build profile names, separated by whitespace
and can be prefixed with an exclamation mark, meaning \(lqNOT\(rq.
A restriction formula represents a disjunctive normal form expression.
.PP
Note that dependencies on packages in the
\&\fBbuild-essential\fR
set can be omitted and that declaring build conflicts against them is
impossible. A list of these packages is in the build-essential package.
.SH "BINARY FIELDS"
.IX Header "BINARY FIELDS"
Note that the
\&\fBPriority\fR, \fBSection\fR
and
\&\fBHomepage\fR
fields can also be in a binary stanza to override the global value from the
source package.
.IP "\fBPackage:\fR \fIbinary-package-name\fR (required)" 4
.IX Item "Package: binary-package-name (required)"
This field is used to name the binary package name. The same restrictions as
to a source package name apply.
.IP "\fBPackage-Type:\fR \fBdeb\fR|\fBudeb\fR|\fItype\fR" 4
.IX Item "Package-Type: deb|udeb|type"
This field defines the type of the package.
\&\fBudeb\fR is for size-constrained packages used by the debian installer.
\&\fBdeb\fR is the default value, it is assumed if the field is absent.
More types might be added in the future.
.IP "\fBArchitecture:\fR \fIarch\fR|\fBall\fR|\fBany\fR (required)" 4
.IX Item "Architecture: arch|all|any (required)"
The architecture specifies on which type of hardware this package runs. For
packages that run on all architectures, use the
\&\fBany\fR
value. For packages that are architecture independent, such as shell and Perl
scripts or documentation, use the
\&\fBall\fR
value. To restrict the packages to a certain set of architectures, specify the
architecture names, separated by a space. It's also possible to put
architecture wildcards in that list (see
\&\fBdpkg-architecture\fR(1)
for more information about them).
.IP "\fBBuild-Profiles:\fR \fIrestriction-formula\fR" 4
.IX Item "Build-Profiles: restriction-formula"
This field specifies the conditions for which this binary package does or
does not build.
To express that condition, the same restriction formula syntax from the
\&\fBBuild-Depends\fR field is used (including the angle brackets).
.Sp
If a binary package stanza does not contain this field, then it implicitly
means that it builds with all build profiles (including none at all).
.Sp
In other words, if a binary package stanza is annotated with a non-empty
\&\fBBuild-Profiles\fR field, then this binary package is generated if and
only if the condition expressed by the conjunctive normal form expression
evaluates to true.
.IP "\fBProtected:\fR \fByes\fR|\fBno\fR" 4
.IX Item "Protected: yes|no"
.PD 0
.IP "\fBEssential:\fR \fByes\fR|\fBno\fR" 4
.IX Item "Essential: yes|no"
.IP "\fBBuild-Essential:\fR \fByes\fR|\fBno\fR" 4
.IX Item "Build-Essential: yes|no"
.IP "\fBMulti-Arch:\fR \fBsame\fR|\fBforeign\fR|\fBallowed\fR|\fBno\fR" 4
.IX Item "Multi-Arch: same|foreign|allowed|no"
.IP "\fBTag:\fR \fItag-list\fR" 4
.IX Item "Tag: tag-list"
.IP "\fBDescription:\fR \fIshort-description\fR (recommended)" 4
.IX Item "Description: short-description (recommended)"
.PD
These fields are described in the
\&\fBdeb-control\fR(5)
manual page, as they are copied literally to the control file of the binary
package.
.IP "\fBDepends:\fR \fIpackage-list\fR" 4
.IX Item "Depends: package-list"
.PD 0
.IP "\fBPre-Depends:\fR \fIpackage-list\fR" 4
.IX Item "Pre-Depends: package-list"
.IP "\fBRecommends:\fR \fIpackage-list\fR" 4
.IX Item "Recommends: package-list"
.IP "\fBSuggests:\fR \fIpackage-list\fR" 4
.IX Item "Suggests: package-list"
.IP "\fBBreaks:\fR \fIpackage-list\fR" 4
.IX Item "Breaks: package-list"
.IP "\fBEnhances:\fR \fIpackage-list\fR" 4
.IX Item "Enhances: package-list"
.IP "\fBReplaces:\fR \fIpackage-list\fR" 4
.IX Item "Replaces: package-list"
.IP "\fBConflicts:\fR \fIpackage-list\fR" 4
.IX Item "Conflicts: package-list"
.IP "\fBProvides:\fR \fIpackage-list\fR" 4
.IX Item "Provides: package-list"
.IP "\fBBuilt-Using:\fR \fIpackage-list\fR" 4
.IX Item "Built-Using: package-list"
.IP "\fBStatic-Built-Using:\fR \fIpackage-list\fR" 4
.IX Item "Static-Built-Using: package-list"
.PD
These fields declare relationships between packages. They are discussed in
the
\&\fBdeb-control\fR(5)
manpage.
When these fields are found in \fIdebian/control\fR they can also end with
a trailing comma (since dpkg 1.10.14), have architecture specifications and
restriction formulas which will all get reduced when generating the fields
for \fBdeb-control\fR(5).
.IP "\fBSubarchitecture:\fR \fIvalue\fR" 4
.IX Item "Subarchitecture: value"
.PD 0
.IP "\fBKernel-Version:\fR \fIvalue\fR" 4
.IX Item "Kernel-Version: value"
.IP "\fBInstaller-Menu-Item:\fR \fIvalue\fR" 4
.IX Item "Installer-Menu-Item: value"
.PD
These fields are used by the debian-installer in \fBudeb\fRs and are
usually not needed.
For more details about them, see
<https://salsa.debian.org/installer\-team/debian\-installer/\-/raw/master/doc/devel/modules.txt>.
.SH "USER-DEFINED FIELDS"
.IX Header "USER-DEFINED FIELDS"
It is allowed to add additional user-defined fields to the control file. The
tools will ignore these fields. If you want the fields to be copied over to
the output files, such as the binary packages, you need to use a custom naming
scheme: the fields should start with an \fBX\fR, followed by zero or more of
the letters \fB\s-1SBC\s0\fR and a hyphen.
.IP "\fBS\fR" 4
.IX Item "S"
The field will appear in the source package control file, see \fBdsc\fR(5).
.IP "\fBB\fR" 4
.IX Item "B"
The field will appear in the control file in the binary package, see
\&\fBdeb-control\fR(5).
.IP "\fBC\fR" 4
.IX Item "C"
The field will appear in the upload control (.changes) file, see
\&\fBdeb-changes\fR(5).
.PP
Note that the \fBX\fR[\fB\s-1SBC\s0\fR]\fB\-\fR prefixes are stripped when the
fields are copied over to the output files. A field \fBXC-Approved-By\fR
will appear as \fBApproved-By\fR in the changes file and will not appear
in the binary or source package control files.
.PP
Take into account that these user-defined fields will be using the global
namespace, which might at some point in the future collide with officially
recognized fields. To avoid such potential situation you can prefix those
fields with \fBPrivate\-\fR, such as \fBXB-Private-New-Field\fR.
.SH "EXAMPLE"
.IX Header "EXAMPLE"
.Vb 10
\& # Comment
\& Source: dpkg
\& Section: admin
\& Priority: required
\& Maintainer: Dpkg Developers <debian\-dpkg@lists.debian.org>
\& # this field is copied to the binary and source packages
\& XBS\-Upstream\-Release\-Status: stable
\& Homepage: https://wiki.debian.org/Teams/Dpkg
\& Vcs\-Browser: https://git.dpkg.org/cgit/dpkg/dpkg.git
\& Vcs\-Git: https://git.dpkg.org/git/dpkg/dpkg.git
\& Standards\-Version: 3.7.3
\& Build\-Depends: pkg\-config, debhelper (>= 4.1.81),
\&  libselinux1\-dev (>= 1.28\-4) [!linux\-any]
\&
\& Package: dpkg\-dev
\& Section: utils
\& Priority: optional
\& Architecture: all
\& # this is a custom field in the binary package
\& XB\-Mentoring\-Contact: Raphael Hertzog <hertzog@debian.org>
\& Depends: dpkg (>= 1.14.6), perl5, perl\-modules, cpio (>= 2.4.2\-2),
\&  bzip2, lzma, patch (>= 2.2\-1), make, binutils, libtimedate\-perl
\& Recommends: gcc | c\-compiler, build\-essential
\& Suggests: gnupg, debian\-keyring
\& Conflicts: dpkg\-cross (<< 2.0.0), devscripts (<< 2.10.26)
\& Replaces: manpages\-pl (<= 20051117\-1)
\& Description: Debian package development tools
\&  This package provides the development tools (including dpkg\-source)
\&  required to unpack, build and upload Debian source packages.
\&  .
\&  Most Debian source packages will require additional tools to build;
\&  for example, most packages need make and the C compiler gcc.
.Ve
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\fI/usr/share/doc/dpkg/spec/rootless\-builds.txt\fR,
\&\fBdeb822\fR\|(5),
\&\fBdeb-control\fR(5),
\&\fBdeb-version\fR(7),
\&\fBdpkg-source\fR(1)

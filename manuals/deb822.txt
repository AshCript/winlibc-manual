.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.43)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "deb822 5"
.TH deb822 5 "2023-05-11" "1.21.22" "dpkg suite"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
deb822 \- Debian RFC822 control data format
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
The package management system manipulates data represented in a common
format, known as \fIcontrol data\fR, stored in \fIcontrol files\fR.
Control files are used for source packages, binary packages and the
\&\fB.changes\fR files which control the installation of uploaded
files (\fBdpkg\fR's internal databases are in a similar format).
.SH "SYNTAX"
.IX Header "SYNTAX"
A control file consists of one or more stanzas of fields (the stanzas
sometimes used to be referred to as paragraphs).
The stanzas are separated by empty lines.
Parsers may accept lines consisting solely of U+0020 \fB\s-1SPACE\s0\fR and
U+0009 \fB\s-1TAB\s0\fR as stanza separators, but control files should use
empty lines.
Some control files allow only one stanza; others allow several, in which
case each stanza usually refers to a different package.
(For example, in source packages, the first stanza refers to the source
package, and later stanzas refer to binary packages generated from the
source.)
The ordering of the stanzas in control files is significant.
.PP
Each stanza consists of a series of data fields.
Each field consists of the field name followed by a colon
(U+003A \(oq\fB:\fR\(cq), and then the data/value associated with that field.
The field name is composed of US-ASCII characters excluding control
characters, space, and colon (i.e., characters in the ranges
U+0021 \(oq\fB!\fR\(cq through U+0039 \(oq\fB9\fR\(cq, and
U+003B \(oq\fB;\fR\(cq through U+007E \(oq\fB~\fR\(cq, inclusive).
Field names must not begin with the comment character
(U+0023 \(oq\fB#\fR\(cq), nor with the hyphen character
(U+002D \(oq\fB\-\fR\(cq).
.PP
The field ends at the end of the line or at the end of the last continuation
line (see below).
Horizontal whitespace (U+0020 \fB\s-1SPACE\s0\fR and U+0009 \fB\s-1TAB\s0\fR) may occur
immediately before or after the value and is ignored there; it is conventional
to put a single space after the colon.
For example, a field might be:
.Sp
.Vb 1
\& Package: dpkg
.Ve
.PP
the field name is \fBPackage\fR and the field value \fBdpkg\fR.
.PP
Empty field values are only permitted in source package control files
(\fIdebian/control\fR).
Such fields are ignored.
.PP
A stanza must not contain more than one instance of a particular field name.
.PP
There are three types of fields:
.RS 4
.IP "\fBsimple\fR" 4
.IX Item "simple"
The field, including its value, must be a single line.
Folding of the field is not permitted.
This is the default field type if the definition of the field does not
specify a different type.
.IP "\fBfolded\fR" 4
.IX Item "folded"
The value of a folded field is a logical line that may span several lines.
The lines after the first are called continuation lines and must start with
a U+0020 \fB\s-1SPACE\s0\fR or a U+0009 \fB\s-1TAB\s0\fR.
Whitespace, including any newlines, is not significant in the field values
of folded fields.
.Sp
This folding method is similar to \s-1RFC5322,\s0 allowing control files that
contain only one stanza and no multiline fields to be read by parsers
written for \s-1RFC5322.\s0
.IP "\fBmultiline\fR" 4
.IX Item "multiline"
The value of a multiline field may comprise multiple continuation lines.
The first line of the value, the part on the same line as the field name,
often has special significance or may have to be empty.
Other lines are added following the same syntax as the continuation lines
of the folded fields.
Whitespace, including newlines, is significant in the values of multiline
fields.
.RE
.RS 4
.Sp
Whitespace must not appear inside names (of packages, architectures, files
or anything else) or version numbers, or between the characters of
multi-character version relationships.
.Sp
The presence and purpose of a field, and the syntax of its value may differ
between types of control files.
.Sp
Field names are not case-sensitive, but it is usual to capitalize the field
names using mixed case as shown below.
Field values are case-sensitive unless the description of the field says
otherwise.
.Sp
Stanza separators (empty lines) and lines consisting only of
U+0020 \fB\s-1SPACE\s0\fR and U+0009 \fB\s-1TAB\s0\fR, are not allowed within field
values or between fields.
Empty lines in field values are usually escaped by representing them by a
U+0020 \fB\s-1SPACE\s0\fR followed by a dot (U+002E \(oq\fB.\fR\(cq).
.Sp
Lines starting with U+0023 \(oq\fB#\fR\(cq, without any preceding whitespace
are comments lines that are only permitted in source package control files
(\fIdebian/control\fR) and in \fBdeb-origin\fR(5) files.
These comment lines are ignored, even between two continuation lines.
They do not end logical lines.
.Sp
All control files must be encoded in \s-1UTF\-8.\s0
.RE
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\fB\s-1RFC822\s0\fR,
\&\fB\s-1RFC5322\s0\fR.

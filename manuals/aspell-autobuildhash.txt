.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.43)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "ASPELL-AUTOBUILDHASH 8"
.TH ASPELL-AUTOBUILDHASH 8 "2023-3-14" "1.29.5" " "
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
aspell\-autobuildhash \- Autobuilding aspell hash files for some dicts
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\& aspell\-autobuildhash [\-\-force]
\&
\&   Options:
\&    \-\-debug      Show extra info about aspell\-autobuildhash internal
\&                 work. Will also enable aspell affix validation.
\&    \-\-dry\-run    Show what would be done, but do nothing real.
\&    \-\-force      Rebuild the hash file for all dicts providing a
\&                 compat file skipping the test.
\&    \-\-triggered  Tell the script that is run in the triggers stage.
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\fBaspell-autobuildhash\fR is a script that will manage aspell hash files
autobuild, intended to be called from the dictionaries-common tools.
Depending on the aspell
compatibility level and on the compatibility level used for the hash file
if present, will decide whether it must be rebuilt or not. This script will
only work on aspell packages prepared to use it, it will do nothing for other
aspell dict packages.
.SH "OPTIONS"
.IX Header "OPTIONS"
.Vb 11
\& \-\-debug      Show some extra information about aspell\-autobuildhash
\&              internal work. Will also enable aspell affix validation.
\& \-\-dry\-run    Show what would be done, but do nothing real.
\& \-\-force      Rebuild the hash file for all dicts providing a compat
\&              file regardless of the compatibility levels found.
\& \-\-triggered  Tell the script that is run in the triggers stage. When
\&              run under dpkg control, do not try to set the
\&              \*(Aqaspell\-autobuildhash\*(Aq trigger, but run real
\&              B<aspell\-autobuildhash> code. When not run under dpkg
\&              control, real code will always be run and \*(Aq\-\-triggered\*(Aq
\&              option has no real effect.
.Ve
.SH "PACKAGE MAINTAINERS"
.IX Header "PACKAGE MAINTAINERS"
To use this system, \fBaspell-autobuildhash\fR expects a \fI\f(CI$lang\fI.compat\fR file
in \fI/var/lib/aspell\fR (\fI\f(CI$lang\fI\fR stands for the lang basename with variant
if any, e.g. \fI\f(CI$lang\fI\fR is something like \fIgl-minimos\fR or \fIen\fR))
containing aspell compatibility version for last successful build
or \*(L"0\*(R" or en empty file if hash is to be rebuild, as is for dictionary
installation and upgrades.
.PP
When upgrading \fBaspell\fR, script will check if version in \fI\f(CI$lang\fI.compat\fR
is different from \fIaspell.compat\fR and rebuild if so, updating
\&\fI\f(CI$lang\fI.compat\fR with the new value.
.PP
Wordlists should previously be compressed either with gzip
(and their extensions set as \fI.mwl.gz\fR or \fI.wl.gz\fR) or preferably
first with aspell prezip and then gzipped (with \fI.cwl.gz\fR extension).
This applies both for plain wordlists and munched wordlists
(in the ispell way) if you use affix compression.
.PP
If your package will provide a single hash, install prezipped+gzipped
wordlist as \fI/usr/share/aspell/$lang.cwl.gz\fR or, if prezip is not used,
as \fI/usr/share/aspell/$lang.mwl.gz\fR.
.PP
If your package will provide more than one aspell hash for the same \f(CW$lang\fR,
you will need to place each compressed wordlist as e.g.
\&\fI/usr/share/aspell/$subdict.cwl.gz\fR, and the common \fI\f(CI$lang\fI.compat\fR as
above. Then create a \fI/usr/share/aspell/$lang.contents\fR file with the
base names of the subdicts, one in a line. For English that will contain,
amongst other possible lines
.PP
.Vb 5
\& en\-common
\& en\-variant_0
\& en\-variant_1
\& en\-variant_2
\& en_CA\-w_accents\-only
.Ve
.PP
No need to use this file if a single hash is being created.
.PP
Dictionaries-common scripts will call internally this script and create a
single hash file at \fI/var/lib/ispell/$lang.rws\fR, or hash files at
\&\fI/var/lib/ispell/$subdict.rws\fR. You must set a symlink to that
files from \fI/usr/lib/aspell/$lang.rws\fR or
\&\fI/usr/lib/aspell/$subdict.rws\fR as appropriate.
.PP
Aspell dictionary packages using this script must make sure that
\&\fI\f(CI$lang\fI.compat\fR is reset on every new install/upgrade, so hash is rebuilt.
They must also make sure that \fI\f(CI$lang\fI.compat\fR and all of
\&\fI/var/lib/aspell/$lang.rws\fR or \fI/var/lib/aspell/$subdict.rws\fR
are removed on package removal.
.PP
As of version \f(CW1.10\fR, \fBinstalldeb-aspell\fR script will understand
\&\f(CW\*(Aqauto\-compat\*(Aq\fR and \f(CW\*(Aqauto\-contents\*(Aq\fR fields in \fI\f(CI$dict\fI.info\-aspell\fR
file to help with this by adding needed debhelper snippets.
Put in that entry the base name(s) of your compat and contents file(s)
and carefully check resulting maintainer scripts after build.
.PP
Note that you are no longer suggested to ship empty files at
any of \fI/var/lib/aspell/$lang.compat\fR, \fI/var/lib/aspell/$lang.rws\fR
or \fI/var/lib/aspell/$subdict.rws\fR, but explicitly create/update them
on install and explicitly remove them on removal.
.PP
\&\fBaspell\fR maintainer should also call this script from package postinst.
When comparing versions it will get the aspell version from file
\&\fI/usr/share/aspell/aspell.compat\fR.
.SH "AUTHORS"
.IX Header "AUTHORS"
Agustin Martin <agmartin@debian.org>
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (C) 2004\-2013 Agustin Martin <agmartin@debian.org>
.PP
This program is free software; you can redistribute it and/or modify
it under the terms of the \s-1GNU\s0 General Public License as published by
the Free Software Foundation; either version 3 of the License, or
(at your option) any later version.

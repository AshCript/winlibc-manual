.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.43)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "deb-buildinfo 5"
.TH deb-buildinfo 5 "2023-05-11" "1.21.22" "dpkg suite"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
deb\-buildinfo \- Debian build information file format
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
\&\fIfilename\fR\fB.buildinfo\fR
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Each Debian source package build can record the build information in
a \fB.buildinfo\fR control file, which contains a number of fields in
\&\fBdeb822\fR\|(5) format.
.PP
Each field begins with a tag, such as
\&\fBSource\fR
or
\&\fBBinary\fR
(case insensitive), followed by a colon, and the body of the field
(case sensitive unless stated otherwise).
Fields are delimited only by field tags.
In other words, field text may be multiple lines in length, but the
installation tools will generally join lines when processing the body
of the field (except in case of the multiline fields
\&\fBBinary-Only-Changes\fR, \fBInstalled-Build-Depends\fR, \fBEnvironment\fR,
\&\fBChecksums\-Md5\fR, \fBChecksums\-Sha1\fR
and
\&\fBChecksums\-Sha256\fR,
see below).
.PP
The control data might be enclosed in an OpenPGP \s-1ASCII\s0 Armored signature,
as specified in \s-1RFC4880.\s0
.PP
The name of the \fB.buildinfo\fR file will depend on the type of build and
will be as specific as necessary but not more;
for a build that includes \fBany\fR the name will be
\&\fIsource-name\fR\fB_\fR\fIbinary-version\fR\fB_\fR\fIarch\fR\fB.buildinfo\fR,
or otherwise for a build that includes \fBall\fR the name will be
\&\fIsource-name\fR\fB_\fR\fIbinary-version\fR\fB_\fR\fBall.buildinfo\fR,
or otherwise for a build that includes \fBsource\fR the name will be
\&\fIsource-name\fR\fB_\fR\fIsource-version\fR\fB_\fR\fBsource.buildinfo\fR.
.SH "FIELDS"
.IX Header "FIELDS"
.IP "\fBFormat:\fR \fIformat-version\fR (required)" 4
.IX Item "Format: format-version (required)"
The value of this field declares the format version of the file.
The syntax of the field value is a version number with a major and minor
component.
Backward incompatible changes to the format will bump the major version,
and backward compatible changes (such as field additions) will bump the
minor version.
The current format version is \fB1.0\fR.
.IP "\fBSource:\fR \fIsource-name\fR [\fB(\fR\fIsource-version\fR\fB)\fR] (required)" 4
.IX Item "Source: source-name [(source-version)] (required)"
The name of the source package.
If the source version differs from the binary version, then the
\&\fIsource-name\fR will be followed by a \fIsource-version\fR in parenthesis.
This can happen when the build is for a binary-only non-maintainer upload.
.IP "\fBBinary:\fR \fIbinary-package-list\fR (required in context)" 4
.IX Item "Binary: binary-package-list (required in context)"
This folded field is a space-separated list of binary packages built.
If the build is source-only, then the field is omitted (since dpkg 1.20.0).
.IP "\fBArchitecture:\fR \fIarch-list\fR (required)" 4
.IX Item "Architecture: arch-list (required)"
This space-separated field lists the architectures of the files currently
being built.
Common architectures are \fBamd64\fR, \fBarmel\fR, \fBi386\fR, etc.
Note that the \fBall\fR value is meant for packages that are architecture
independent.
If the source for the package is also being built, the special entry
\&\fBsource\fR is also present.
Architecture wildcards must never be present in the list.
.IP "\fBVersion:\fR \fIversion-string\fR (required)" 4
.IX Item "Version: version-string (required)"
Typically, this is the original package's version number in whatever form
the program's author uses.
It may also include a Debian revision number (for non-native packages).
The exact format and sorting algorithm are described in
\&\fBdeb-version\fR(7).
.IP "\fBBinary-Only-Changes:\fR" 4
.IX Item "Binary-Only-Changes:"
.PD 0
.IP " \fIchangelog-entry\fR" 4
.IX Item " changelog-entry"
.PD
This multiline field contains the concatenated text of the changelog
entry for a binary-only non-maintainer upload (binNMU) if that is the case.
To make this a valid multiline field empty lines are replaced with a
single full stop (\(oq.\(cq) and all lines are indented by one space
character.
The exact content depends on the changelog format.
.IP "\fBChecksums\-Md5:\fR (required)" 4
.IX Item "Checksums-Md5: (required)"
.PD 0
.IP "\fBChecksums\-Sha1:\fR (required)" 4
.IX Item "Checksums-Sha1: (required)"
.IP "\fBChecksums\-Sha256:\fR (required)" 4
.IX Item "Checksums-Sha256: (required)"
.IP " \fIchecksum\fR \fIsize\fR \fIfilename\fR" 4
.IX Item " checksum size filename"
.PD
These multiline fields contain a list of files with a checksum and size
for each one.
These fields have the same syntax and differ only in the checksum algorithm
used: \s-1MD5\s0 for \fBChecksums\-Md5\fR, \s-1SHA\-1\s0 for \fBChecksums\-Sha1\fR and
\&\s-1SHA\-256\s0 for \fBChecksums\-Sha256\fR.
.Sp
The first line of the field value (the part on the same line as the field
name followed by a colon) is always empty.
The content of the field is expressed as continuation lines, one line per file.
Each line consists of space-separated entries describing the file:
the checksum, the file size, and the file name.
.Sp
These fields list all files that make up the build.
.IP "\fBBuild-Origin:\fR \fIname\fR" 4
.IX Item "Build-Origin: name"
The name of the distribution this package is originating from.
.IP "\fBBuild-Architecture:\fR \fIarch\fR (required)" 4
.IX Item "Build-Architecture: arch (required)"
The Debian architecture for the installation the packages is being built in.
Common architectures are \fBamd64\fR, \fBarmel\fR, \fBi386\fR, etc.
.IP "\fBBuild-Date:\fR \fIbuild-date\fR" 4
.IX Item "Build-Date: build-date"
The date the package was built.
It must be in the same format as the date in a \fBdeb-changelog\fR(5)
entry.
.IP "\fBBuild-Kernel-Version:\fR \fIbuild-kernel-version\fR" 4
.IX Item "Build-Kernel-Version: build-kernel-version"
The release and version (in an unspecified format) of the kernel running
on the build system.
This field is only going to be present if the builder has explicitly
requested it, to avoid leaking possibly sensitive information.
.IP "\fBBuild-Path:\fR \fIbuild-path\fR" 4
.IX Item "Build-Path: build-path"
The absolute build path, which correspond to the unpacked source tree.
This field is only going to be present if the vendor has allowed it
via some pattern match to avoid leaking possibly sensitive information.
.Sp
On Debian and derivatives only build paths starting with \fI/build/\fR
will emit this field.
.IP "\fBBuild-Tainted-By:\fR" 4
.IX Item "Build-Tainted-By:"
.PD 0
.IP " \fItaint-reason-list\fR" 4
.IX Item " taint-reason-list"
.PD
This folded field contains a space-separated list of non-exhaustive reason
tags (formed by alphanumeric and dash characters) which identify why the
current build has been tainted (since dpkg 1.19.5).
.Sp
On Debian and derivatives the following reason tags can be emitted:
.RS 4
.IP "\fBmerged-usr-via-aliased-dirs\fR" 4
.IX Item "merged-usr-via-aliased-dirs"
The system has a merged \fI/usr\fR via aliased directories (previously known
as \fBmerged-usr-via-symlinks\fR).
This will confuse \fBdpkg-query\fR, \fBdpkg-statoverride\fR,
\&\fBdpkg-trigger\fR, \fBupdate-alternatives\fR and any other tool using
pathnames as keys into their databases, as it creates filesystem aliasing
problems, and messes with the understanding of the filesystem that
\&\fBdpkg\fR has recorded in its database.
For build systems that hardcode pathnames to specific binaries or libraries
on the resulting artifacts, it can also produce packages that will be
incompatible with non\-/usr\-merged filesystems.
.IP "\fBusr-local-has-configs\fR" 4
.IX Item "usr-local-has-configs"
The system has configuration files under \fI/usr/local/etc\fR.
.IP "\fBusr-local-has-includes\fR" 4
.IX Item "usr-local-has-includes"
The system has header files under \fI/usr/local/include\fR.
.IP "\fBusr-local-has-programs\fR" 4
.IX Item "usr-local-has-programs"
The system has programs under \fI/usr/local/bin\fR or \fI/usr/local/sbin\fR.
.IP "\fBusr-local-has-libraries\fR" 4
.IX Item "usr-local-has-libraries"
The system has libraries, either static or shared under \fI/usr/local/lib\fR.
.IP "\fBcan-execute-cross-built-programs\fR" 4
.IX Item "can-execute-cross-built-programs"
The system can execute cross built programs, either directly or via some
emulation layer.
.Sp
Since dpkg 1.21.10.
.RE
.RS 4
.RE
.IP "\fBInstalled-Build-Depends:\fR (required)" 4
.IX Item "Installed-Build-Depends: (required)"
.PD 0
.IP " \fIpackage-list\fR" 4
.IX Item " package-list"
.PD
The list of installed and configured packages that might affect the package
build process.
.Sp
The list consists of each package name, optionally arch-qualified for foreign
architectures, with an exact version restriction, separated by commas.
.Sp
The list includes all essential packages, packages listed in
\&\fBBuild-Depends\fR, \fBBuild-Depends-Arch\fR, \fBBuild-Depends-Indep\fR
source control fields, any vendor specific builtin dependencies, and all
their recursive dependencies.
On Debian and derivatives the dependency builtin is \fBbuild-essential\fR.
.Sp
For dependencies coming from the source control fields, all dependency
alternatives and all providers of virtual packages depended on will be
included.
.IP "\fBEnvironment:\fR" 4
.IX Item "Environment:"
.PD 0
.IP " \fIvariable-list\fR" 4
.IX Item " variable-list"
.PD
The list of environment variables that are known to affect the package build
process, with each environment variable followed by an equal sign (\(oq=\(cq)
and the variable's quoted value, using double quotes (\(oq"\(cq), and
backslashes escaped (\(oq\e\e\(cq).
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\fBdeb822\fR\|(5),
\&\fBdeb-changes\fR(5),
\&\fBdeb-version\fR(7),
\&\fBdpkg-genbuildinfo\fR(1).

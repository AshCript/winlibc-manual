.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.43)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Algorithm::Diff::XS 3pm"
.TH Algorithm::Diff::XS 3pm "2022-10-19" "perl v5.36.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Algorithm::Diff::XS \- Algorithm::Diff with XS core loop
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 3
\&    # Drop\-in replacement to Algorithm::Diff, but "compact_diff"
\&    # and C<LCSidx> will run much faster for large data sets.
\&    use Algorithm::Diff::XS qw( compact_diff LCSidx );
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This module is a simple re-packaging of Joe Schaefer's excellent
but not very well-known Algorithm::LCS with a drop-in interface
that simply re-uses the installed version of the Algorithm::Diff
module.
.PP
Note that only the \f(CW\*(C`LCSidx\*(C'\fR function is optimized in \s-1XS\s0 at the
moment, which means only \f(CW\*(C`compact_diff\*(C'\fR will get significantly
faster for large data sets, while \f(CW\*(C`diff\*(C'\fR and \f(CW\*(C`sdiff\*(C'\fR will run
in identical speed as \f(CW\*(C`Algorithm::Diff\*(C'\fR.
.SH "BENCHMARK"
.IX Header "BENCHMARK"
.Vb 3
\&                      Rate     Algorithm::Diff Algorithm::Diff::XS
\&Algorithm::Diff     14.7/s                  \-\-                \-98%
\&Algorithm::Diff::XS  806/s               5402%                  \-\-
.Ve
.PP
The benchmarking script is as below:
.PP
.Vb 9
\&    my @data = ([qw/a b d/ x 50], [qw/b a d c/ x 50]);
\&    cmpthese( 500, {
\&        \*(AqAlgorithm::Diff\*(Aq => sub {
\&            Algorithm::Diff::compact_diff(@data)
\&        },
\&        \*(AqAlgorithm::Diff::XS\*(Aq => sub {
\&            Algorithm::Diff::XS::compact_diff(@data)
\&        },
\&    });
.Ve
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Algorithm::Diff, Algorithm::LCS.
.SH "AUTHORS"
.IX Header "AUTHORS"
Audrey Tang <cpan@audreyt.org>
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright 2008 by Audrey Tang <cpan@audreyt.org>.
.PP
Contains derived code copyrighted 2003 by Joe Schaefer,
<joe+cpan@sunstarsys.com>.
.PP
This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself.

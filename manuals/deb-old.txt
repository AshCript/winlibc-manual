.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.43)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "deb-old 5"
.TH deb-old 5 "2023-05-11" "1.21.22" "dpkg suite"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
deb\-old \- old style Debian binary package format
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
\&\fIfilename\fR\fB.deb\fR
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
The
\&\fB.deb\fR
format is the Debian binary package file format. This manual page
describes the
\&\fBold\fR
format, used before Debian 0.93. Please see
\&\fBdeb\fR(5)
for details of the new format.
.SH "FORMAT"
.IX Header "FORMAT"
The file is two lines of format information as \s-1ASCII\s0 text, followed by
two concatenated gzipped ustar files.
.PP
The first line is the format version number padded to 8 digits, and is
\&\fB0.939000\fR
for all old-format archives.
.PP
The second line is a decimal string (without leading zeroes) giving
the length of the first gzipped tarfile.
.PP
Each of these lines is terminated with a single newline character.
.PP
The first tarfile contains the control information, as a series of
ordinary files. The file
\&\fBcontrol\fR
must be present, as it contains the core control information.
.PP
In some very old archives, the files in the control tarfile may
optionally be in a
\&\fB\s-1DEBIAN\s0\fR
subdirectory. In that case, the
\&\fB\s-1DEBIAN\s0\fR
subdirectory will be in the control tarfile too, and the control
tarfile will have only files in that directory. Optionally the
control tarfile may contain an entry for
\(oq\fB.\fR\(cq,
that is, the current directory.
.PP
The second gzipped tarfile is the filesystem archive, containing
pathnames relative to the root directory of the system to be installed
on. The pathnames do not have leading slashes.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\fBdeb\fR(5),
\&\fBdpkg-deb\fR(1),
\&\fBdeb-control\fR(5).

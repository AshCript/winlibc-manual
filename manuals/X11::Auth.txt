.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.42)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Auth 3pm"
.TH Auth 3pm "2022-10-13" "perl v5.34.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
X11::Auth \- Perl module to read X11 authority files
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 3
\&  require X11::Auth;
\&  $a = new X11::Auth;
\&  ($auth_type, $auth_data) = $a\->get_by_host($host, $disp_num);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This module is an approximate perl replacement for the libXau C library
and the \fBxauth\fR\|(1) program. It reads and interprets the files (usually
\&'~/.Xauthority') that hold authorization data used in connecting to
X servers. Since it was written mainly for the use of X11::Protocol,
its functionality is currently restricted to reading, not writing, of
these files.
.SH "METHODS"
.IX Header "METHODS"
.SS "new"
.IX Subsection "new"
.Vb 2
\&  $auth = X11::Auth\->new;
\&  $auth = X11::Auth\->open($filename);
.Ve
.PP
Open an authority file, and create an object to handle it. The filename
will be taken from the \s-1XAUTHORITY\s0 environment variable, if present, or
\&'.Xauthority' in the user's home directory, or it may be overridden by
an argument. 'open' may be used as a synonym.
.SS "get_one"
.IX Subsection "get_one"
.Vb 2
\&  ($family, $host_addr, $display_num, $auth_name, $auth_data)
\&     = $auth\->get_one;
.Ve
.PP
Read one entry from the file. Returns a null list at end of file.
\&\f(CW$family\fR is usually 'Internet' or 'Local', and \f(CW$display_num\fR can
be any string.
.SS "get_all"
.IX Subsection "get_all"
.Vb 1
\&  @auth_data = $auth\->get_all;
.Ve
.PP
Read all of the entries in the file. Each member of the array returned
is an array ref similar to the list returned by \fBget_one()\fR.
.SS "get_by_host"
.IX Subsection "get_by_host"
.Vb 2
\&  ($auth_name, $auth_data)
\&     = $auth\->get_by_host($host, $family, $display_num);
.Ve
.PP
Get authentication data for a connection of type \f(CW$family\fR to display
\&\f(CW$display_num\fR on \f(CW$host\fR. If \f(CW$family\fR is 'Internet', the host will be
translated into an appropriate address by \fBgethostbyname()\fR. If no data
is found, returns an empty list.
.SH "COMPATIBILITY"
.IX Header "COMPATIBILITY"
The following table shows the (rough) correspondence between libXau
calls and X11::Auth methods:
.PP
.Vb 12
\&  libXau                     X11::Auth
\&  \-\-\-\-\-\-                     \-\-\-\-\-\-\-\-\-
\&  XauFileName                $ENV{XAUTHORITY}
\&                             || "$ENV{HOME}/.Xauthority"
\&  fopen(XauFileName(), "rb") $auth = new X11::Auth
\&  XauReadAuth                $auth\->get_one
\&  XauWriteAuth
\&  XauGetAuthByAddr           $auth\->get_by_host
\&  XauGetBestAuthByAddr 
\&  XauLockAuth
\&  XauUnlockAuth
\&  XauDisposeAuth
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
Stephen McCamant <SMCCAM@cpan.org>
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\fBperl\fR\|(1), X11::Protocol, \fBXau\fR\|(3), \fBxauth\fR\|(1),
lib/Xau/README in the X11 source distribution.
